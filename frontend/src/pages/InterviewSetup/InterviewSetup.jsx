// FILE: frontend/src/components/InterviewSetupModal.jsx

import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { serverURL } from "../../App";

// The component no longer accepts any props.
function InterviewSetup() {
  const [formData, setFormData] = useState({
    experience: "",
    description: "",
    expertise: "",
  });
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  // On mount, check if user is logged in.
  useEffect(() => {
    if (!localStorage.getItem("userInfo")) {
      alert("You must be logged in to create an interview.");
      navigate("/login");
    }
  }, [navigate]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // NEW: A function to handle closing the modal by navigating away.
  const handleClose = () => {
    // Navigate to a sensible default page, like the dashboard.
    // Change "/dashboard" to whatever your main page is.
    navigate("/dashboard"); 
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log("Submit triggred")
    setIsLoading(true);

    try {
      const userInfo = JSON.parse(localStorage.getItem("userInfo"));
      const config = {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${userInfo.token}`,
        },
      };

      const { data } = await axios.post(
        `${serverURL}/api/interviews/generate-from-jd`,
        formData,
        config
      );

      if (data.questions && data.questions.length > 0) {
        alert("✅ Interview questions generated successfully!");
        // The navigation to the interview page effectively "closes" this modal.
        navigate("/interview", { state: { questions: data.questions } });
      } else {
        throw new Error("No questions were generated by the AI.");
      }
    } catch (error) {
      console.error("Error generating interview questions:", error);
      if (error.response?.status === 401) {
        alert("❌ Your session has expired. Please log in again.");
        navigate("/login");
      } else {
        alert("❌ Failed to generate questions. Please try again.");
      }
    } finally {
      setIsLoading(false);
    }
  };
  console.log("✅ InterviewSetup page loaded");
  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl shadow-lg w-full max-w-lg p-8 relative">
        {/* The close button now uses the new handleClose function */}
        <button
          onClick={handleClose} // <-- CHANGED
          className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 text-2xl"
        >
          &times;
        </button>

        <h2 className="text-2xl font-bold text-blue-600 mb-6">
          Create a Custom Interview
        </h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label htmlFor="experience" className="block text-gray-700 font-medium mb-1">
              Job Experience (in years)
            </label>
            <input
              id="experience"
              name="experience"
              type="number"
              placeholder="e.g. 3"
              value={formData.experience}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          <div>
            <label htmlFor="description" className="block text-gray-700 font-medium mb-1">
              Job Description
            </label>
            <textarea
              id="description"
              name="description"
              placeholder="Paste the job description here..."
              rows="4"
              value={formData.description}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            ></textarea>
          </div>

          <div>
            <label htmlFor="expertise" className="block text-gray-700 font-medium mb-1">
              Your Key Skills / Expertise
            </label>
            <input
              id="expertise"
              name="expertise"
              type="text"
              placeholder="e.g. React, Node.js, System Design"
              value={formData.expertise}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
              required
            />
          </div>

          <div className="flex justify-end pt-4">
            <button
              type="submit"
              disabled={isLoading}
              className="bg-blue-600 text-white px-6 py-2 rounded-lg shadow hover:bg-blue-700 transition disabled:bg-gray-400 disabled:cursor-not-allowed"
            >
              {isLoading ? "Generating..." : "Generate & Start"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default InterviewSetup;